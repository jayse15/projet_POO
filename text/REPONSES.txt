P1.1)
Nous avons représenté leurs coordonnées comme un array de taille 3. Cela nous
permet de plus facilement travailler avec des boucles, l'inconvenient est
qu'il y a la possibilité de mal indexer ces array, mais nous allons gérer ces
situations avec des messages d'erreur avec un throw.
Pour l'instant nous avons un attribut privé, l'array en question, et 4 méthodes
publiques, set_coord, get_coord, affiche et compare, toutes expliquées dans le
fichier Vecteur3D.h. Nous avons suivi les consignes données mais la méthode en
plus (get_coord) est nécessaire car nous avons choisi de mettre l'array des
composantes comme attribut privé.

P4.1)
Nous n'avons pas ajouté de constructeur de copie. Comme le seul attribut d'un
vecteur est un array, alors le constructeur de copie par défaut fonctionne très
bien.

P4.2)
Si l'on devait définir un constructeur en coordonnées sphériques, il n'y aurait
aucune différence au niveau des attributs, on peut simplement convertir de
sphériques à cartésiennes. Mais il y aura un conflit avec le constructeur en
coordonnées cartésiennes car on aurait les mêmes entrées, donc il faudrait
ajouter un booléen comme entrée pour ce constructeur ce qui ne serait pas optimal..

P4.3)
Pour l'affichage et la comparaison, nous avons introduit les opérateurs suivants:
    -les opérateurs internes == et !=
    -l'opérateur externe << qui utilise Vecteur3D::affiche

P7.1)
la méthode dessine_sur est, pour la classe Dessinable, une methode virtuelle pure
qui sera héritée et devra être "overridée" par les differentes sous classes de
Dessinable du systeme (partiucle, enceinte, ...). Ceci nous permettera de
dessiner un objet dessinable sur un support à dessin sans devoir se soucier de
quel type d'objet c'est. #polymorphisme :()

P8.1)
Il faut faire attention aux copies (surface ou profonde), le concept d'unicité
ou non (unique_ptr) et tout ce qui est liée a l'allocation et la déallocation de
mémoire. Les copies peuvent être gérées par la supression du constructeur de
copie et de l'opérateur =, si on utilise des unique_ptr il faudra adapter les
méthodes pour qu'elles ne fassent pas de copie des pointeurs, et l'allocation et
la déallocation peut être gérée par le destructeur si on utilise des pointeurs
"à la C" et se fait tout seul avec les réferences et les pointeurs C++11.

P8.2)
Notre classe étant dessinable, elle va hériter de la classe Dessinable, et de sa
méthode virutelle "dessine_sur".
De plus, le système sera composé d'une enceinte, et d'un ensemble de particules.
Ainsi, les attributs de la classe Systeme sont une instance de la classe
Enceinte, ainsi qu'un tableau dynamique (vector) de unique_ptr sur des
instances de la classe Particule. Nous utilisons des pointeurs afin de réaliser
du polymorphisme avec les particules, qui peuvent avoir plusieures formes et ils
sont unique car une particule ne peut pas appartenir a deux systèmes.

P8.3)
Pour empêcher totalement la copie et l'affectation des instances de la classe
Systeme, nous allons utiliser la commande "delete" offerte par c++11, qui efface
le constructeur de copie et l'opérateur "=" par défaut.

P9.1)
On a implémenté la création d'une situation initiale avec la méthode
Systeme::initialisation. Cette méthode est un template afin que l'on puisse
choisir quel type de particule créer et on teste la validité du type avec des
if constexpr à la compilation. La méthode tire aléatoirement les positions et
vitesses de la particule en fonction de sa masse et la température du système et
ajoute ensuite cette particule au systeme.
Nous avons implémenté l'évolution du système avec plusieurs méthodes. L'évolution
commence avec la méthode Systeme::evolue. Cette méthode va, pour une particule à
la fois, la faire avancer avec la méthode Particule::evolue. Ensuite elle va
refaire une boucle sur chaque particule et tester si elle entre en collision
avec une paroi avec la méthode Systeme::collision_paroi, et tester si elle entre
en collision avec une particule avec la méthode systeme::collision_particules
qui parcoure toutes les particules du systeme et fait un appel à la fonction
Particule::collision_particule pour chaque cas possible. Comme indiqué dans
l'ennoncé, on a décidé qu'une distance plus petite que "PRECISION" d'une paroi
entrainerait un rebond et une distance plus petite que "EPSILON" entre deux
particules entrainerait une collision.


P9.2)
Si on pose n le nombre de particules dans notre système, on a une première
boucle pour faire avancer chaque particule qui est fait n opérations. Puis on
les parcoure à nouveau et on compare les positions de chaque particule par
rapport aux autres. En supposant qu'une comparaison et un avancement est en O(1)
et qu'on compare chaque paire de particules une seule fois, nous aurons un
algorithme qui fait n + ((n-1) + ... + 1) = n + n(n-1)/2 = n(n+1)/2 opérations
qui est en O(n^2).

P13.1)
Cette particule sera comme toutes les autres mais on en gardera une référence
dans une sous-classe de TextViewer appelée Brownien (Brownien.h). Ceci ne cause
pas de problème au niveau du unique_ptr car ce n'est qu'une réference et, lors de
l'affichage, on va comparer les adresses des particules à l'adresse de la
particule suivie afin de déterminer si ce sont exactement les mêmes. Si ce sont
les mêmes on va aussi injecter l'affichage de la particule suivie dans un
fichier texte, qui doit exister au préalable.

P14.1)
La méthode proposé dans le P14 consiste à ne plus comparer chaque particule
avec tous les autres pour vérifier les collisions, mais à regarder quelles
"cases" de l'espace contiennent plus d'une particule. Ainsi, en supposant que il
y a en général qu'une seule particule par case, et donc en général n cases,
les algorithmes 'insert' / '[]', 'erase', et 'find' sont en O(1) sur une case.
On aurait donc une complexité en O(n) car nous parcourons une fois chaque case
pour la collision entre particules et nous utilisons ces fonctions qui sont en O(1)

P14.2)
Nous avons crée la classe Grid dans Systeme.h qui est une sous-classe de système.
Grid possède aussi une map< array<3, int>, set<size_t> > représentant les cases
occupées liées à l'ensemble d'indexes des particules s'y trouvant. Nous avons
delete la methode Systeme::collsion_particules dans Grid afin de la redefinir
sans entrée. En effet il suffit de parcourir la map et faire entrer en collsion
la première particule d'une case avec toutes les autres dans la même case. Cette
dernière étape aurait pu être faite différemment (collision de chaque particule
avec chacune), mais physiquement il est pas facile de définir lequel est le
meilleur choix. Comme on a une map et des set, on a utilisé des itérateurs, des
find et des erase afin d'optimizer la recherche d'indexes et le modification de
la map.
