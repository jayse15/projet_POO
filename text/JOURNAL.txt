Semaine 1:

Nous avons crée les fichiers de base conception, journal, README et reponses.
Nous avons mis en place notre dépôt sur github.

Semaine 2:

Nous avons fini la conception des fichiers Vecteur 3D. Nous avons rajouté un
module "utils" afin d'y mettre des fonctions et constantes qui pourront être
utile pour ce projet. Le makefile est fonctionnel mais il faut imposer
l'utilisation de C++ (par défaut C), et indiquer la version. Toutes les méthodes
de base de Vecteur3D sont fonctionelles.
Nous avons utilisé des array de dimension 3 pour représenter les vecteurs, mais
il nous faut encore gérer les cas d'erreurs où l'utilisateur tente d'entrer une
coordonnée dans un mauvais index.

Semaine 3:

Le make avait déjà été créée lors de la conception des fichiers en semaine 2, et
était déjà fonctionnel. Aucune question n'ayant été posée dans le sujet de cette
semaine, nous avons repris le programme en quête d'optimisation.

Semaine 4:

Nous avons défini les différents constructeurs de la classe Vecteur3D (par
défaut, qui renvoie le vecteur nul / copie).
Nous avons également définis de nombreux opérateurs pour simplifier
l'utilisation du programme par le programmeur utilisateur.
Cependant, nous avons rencontré certaines difficultés lors de la définition de
l'opérateur d'affichage, <<.
Enfin, nous avons remodellé complétement le programme testVecteur3D.cc de
manière à ne faire des tests que grâce aux opérateurs, sans passer par les
fonctions créées en semaine 2.

Semaine 5:

Nous avons remplacé toutes les fonctions faites en semaine 2 par des opérateurs,
il reste plus qu'un setter, un getter et un comparateur afin de pouvoir
manipuler la précision de comparaison entre vecteurs. Toutes les opérations
algébriques entre vecteurs et entre vecteurs et scalaires sont opérationelles
ainsi que la méthode d'affichage <<. Nous avons aussi crée la classe Particule
et la classe Enceinte, qui compilent sans problème.

Semaine 6:

Dans un premier temps, nous avons pour l'instant introduit 2 sous classes de la
classe Particule; Argon et Néon, dont nous avons juste redéfini l'opérateur
d'affichage <<, pour que lorsque l'on veut afficher une telle particule, son nom
apparaisse.
Deuxièmement, nous avons défini les différentes classes liées au graphisme de
notre projet, les classes Dessinable, SupportADessin, et TextViewer.
Cependant, nous avons rencontré des difficultés au niveau de la compréhension de
la classe TextViewer, ce qui nous a ralenti dans l'écriture du fichier
exerciceP7.cc.

Semaine 7:
Alban//
Dans un premier temps, j'ai suivi le tutoriel graphique associé au projet pour
mettre à jour la classe TextViewer.
De manière à mieux notifier des erreurs de présentation dans le programme, nous
avons introduit une troisième sous classe de particule, Helium, qui reprend
simplement le meme modèle que les classes Argon et Néon introduites précédemment.
Pour pouvoir gérer les collisions, nous avons du introduire des getter dans les
classes Enceinte et Particule, pour accéder aux dimensions de l'enceinte créée
dans le système ainsi que les coordonnées et les composantes de la vitesse de
chaque particules. En effet, lors d'une collision, nous devons modifier la
direction de la vitesse et/ou les valeurs de ses composantes (notamment dans le
cas d'un choc entre particules).

Semaine 8:
Retour Jason//
Suite au retour de Jason, nous avons débriefé de mon avancée en semaine 7. Nous
n'avons pas pu poursuivre énormément l'avancée du projet.
Nous avons pu terminer la définition des méthodes modélisant les chocs entre
particules. Cependant, la compilation du projet indiquait des messages d'erreurs
que nous n'arrivions pas à résoudre. En effet, les inclusions de fichiers .h
dans d'autres posaient problème. De la partie P9, il nous restait donc à tester
le fonctionnement de l'exerciceP9.

Semaine 9:
Après avoir corrigé les problèmes de compilation liés aux inclusions, nous avons
fait quelques modifications du programme pour rectifier des erreurs de
modélisation.
Comme conseillé par le professeur, nous avons sauté le graphisme pour l'instant,
et avonscommencé la partie P12.
Pour réussir à mettre en place l'exerciceP9, nous avons du modifier plusieurs
définitions de nos méthodes, pour introduire un indice, correspondant à la
position de la particule dans le système (sa position dans le vector de
Particules).

Semaine 10:
On a décidé de faire en sorte que les attributs de systeme soient des unique_ptr
sur des particules et une enceinte. L'exercice P9 est fini mais nous avons
rencontré des problèmes au niveau d'imposer le choix du zenith et de l'azimut.
La solution que nous avons décidé d'implémenter (suite aux conseils de notre
assistant) est d'avoir deux fois la méthodes collision_particule (dans la classe
Particule). Une d'entre elle aura des paramètres fixes (zénith et azimut comme
demandé dans l'exerciceP9), et une sera la formule générale (nommée
collision_particule_save), dont les paramètres z et phi sont tirés uniformément.

Semaine 11:
De manière à pouvoir indiquer quel type de partiucle nous allons initialiser dans
la méthode initialisation, nous avons défini un template, ainsi que des tests
permettant de vérifier quel type est entré dans la fonction. De plus, nous avons
fixé les masses des différentes sous classe de Particule, et adapté la fonction
initialisation pour que si un Néon, Argon ou Hélium est choisi, il n'y ait pas
de masse à entrer en paramètre.
