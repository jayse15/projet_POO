P1.1)
Nous avons représenté leurs coordonnées comme un array de taille 3. Cela nous
permet de plus facilement travailler avec des boucles, l'inconvenient est
qu'il y a la possibilité de mal indexer ces array, mais nous allons gérer ces
situations avec des messages d'erreur ou des exceptions (try, throw).
Pour l'instant nous avons un attribut privé, l'array en question, et 4 méthodes
publiques, set_coord, get_coord, affiche et compare, toutes expliquées dans le
fichier Vecteur3D.h. Nous avons suivi les consignes données mais la méthode en
plus (get_coord) est nécessaire car nous avons choisi de mettre l'array des
composantes comme attribut privé.

P4.1)
Nous n'avons pas ajouté de constructeur de copie. Comme le seul attribut d'un
vecteur est un array, alors le constructeur de copie par défaut fonctionne très
bien.

P4.2)
Si l'on devait définir un constructeur en coordonnées sphériques, il n'y aurait
aucune différence au niveau des attributs, on peut simplement convertir de
sphériques à cartésiennes. Il y aura un conflit avec le constructeur en
coordonnées cartésiennes car on aurait les mêmes entrées, mais cela peut être
résolu avec un booléen en plus comme entrée. Au final, rajouter l'option
d'initialiser en spheriques ne pose pas de problème et pourrait même être très
utile !


P4.3)
Nous avons introduit de nombreux opérateurs:
    -les opérateurs += et -=; //incrémentation et décrémentation
    -les opérateurs + et -; //addition et soustraction
    -les opérateurs == et !=; //comparaison
    -les opérateurs *= et /=; //multiplication et division scalaire
    -les opérateurs * et /; // idem mais pour retourner un vecteur
    -l'opérateur *; //produit scalaire
    -l'opérateur ^=; //le produit vectoriel d'un vecteur avec lui même
    -l'opérateur ^; //produit vectoriel
    -l'opérateur ~; //vecteur unitaire
    -l'opérateur -; //l'inverse d'un vecteur
